import logging
import sys
from functools import wraps


class CustomExceptionMessage(Exception):
    """
    This function provides error message with additional details.

    Parameters
    ----------
    error: Exception
        Provide the error that will be generated by the Exception class.

    Returns
    -------
    error_message: str
        A string containing the script file name, error line number and the
        error message.
    """

    def __init__(self, error: Exception):
        super().__init__(error)
        self.error = error
        self.error_message = self.error_message_detail()

    def __str__(self) -> str:
        return self.error_message

    def error_message_detail(self) -> str:
        _, _, exception_traceback = sys.exc_info()
        file_name = exception_traceback.tb_frame.f_code.co_filename
        line_number = exception_traceback.tb_lineno

        error_message = (
            "[Error] A error occurred in python module: "
            f"[{file_name}] at line number: [{line_number}] "
            f"with error message: [{self.error}]."
        )

        return error_message


def log_exception(logger: logging.Logger):
    """
    A decorator for catching exception and logging them in the log file.
    """

    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except:
                issue = "exception in " + func.__name__ + "\n"
                issue = issue + "==========================\n"
                logger.exception(issue)
                raise

        return wrapper

    return decorator
